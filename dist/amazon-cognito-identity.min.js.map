<<<<<<< HEAD
{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap f1d89c5d6f3c96a74258","webpack:///./enhance.js","webpack:///external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk\",\"commonjs\":\"aws-sdk\",\"amd\":\"aws-sdk\"}","webpack:///./src/AuthenticationHelper.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoUser.js","webpack:///./src/CognitoUserAttribute.js","webpack:///./src/CognitoUserSession.js","webpack:///./src/DateHelper.js","webpack:///./src/StorageHelper.js","webpack:///external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./src/AuthenticationDetails.js","webpack:///./src/CognitoUserPool.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","require","define","amd","AmazonCognitoIdentity","AWSCognito","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","defineProperty","value","_src","keys","forEach","enumerable","get","_awsSdk","enhancements","CognitoIdentityServiceProvider","window","crypto","msCrypto","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_jsbn","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","util","Buffer","poolName","hexRandom","lib","randomBytes","randomBigInt","smallABigInt","mod","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","padHex","verifierDevicesNotPadded","modPow","a","A","Error","B","UHexHash","finalU","buf","hashHex","sha256","Array","join","hexStr","ikm","salt","prk","hmac","infoBitsUpdate","buffer","concat","String","fromCharCode","slice","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","hkdf","computehkdf","bigInt","hashStr","indexOf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64","decode","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_interopRequireDefault","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","_StorageHelper","_StorageHelper2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","authDetails","callback","_this","authenticationHelper","getUserPoolId","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","dateNow","getNowString","signatureString","SECRET_BLOCK","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","message","toLowerCase","clearCachedDeviceKeyAndPassword","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","substr","newPasswordRequired","authenticateUserInternal","_this2","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","newPassword","requiredAttributeData","_this3","finalUserAttributes","NEW_PASSWORD","_this4","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this5","ANSWER","_this6","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","_this7","clearCachedTokens","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","storage","getStorage","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this8","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","Password","attributeName","Code","_this9","forgetSpecificDevice","result","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this10","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","dataMemory","MemoryStorage","StorageHelper","storageWindow","sessionStorage","exception","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","test","region","userPoolId","clientId","apiVersion","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(14);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _awsSdk.CognitoIdentityServiceProvider[key] = enhancements[key];\n\t});\n\t\n\t// The version of crypto-browserify included by aws-sdk only\n\t// checks for window.crypto, not window.msCrypto as used by\n\t// IE 11 – so we set it explicitly here\n\tif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n\t  window.crypto = window.msCrypto;\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * License. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\n\tn\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\tvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\n\t   * Constructs a new AuthenticationHelper object\n\t   * @param {string} PoolName Cognito user pool name.\n\t   */\n\t  function AuthenticationHelper(PoolName) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = new _awsSdk.util.Buffer('Caldera Derived Key', 'utf8');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\n\t   * @returns {BigInteger} small A, a random number\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\n\t     * @returns {BigInteger} large A, a value generated from small A\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random big integer\n\t     * @returns {BigInteger} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var hexRandom = _awsSdk.util.crypto.lib.randomBytes(128).toString('hex');\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random string\n\t     * @returns {string} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      return _awsSdk.util.crypto.lib.randomBytes(40).toString('base64');\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in password hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in devices hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Value used to verify devices.\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\n\t     * Generate salts and compute verifier.\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\n\t     * @param {string} username User to generate verifier for.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var hexRandom = _awsSdk.util.crypto.lib.randomBytes(16).toString('hex');\n\t      this.SaltToHashDevices = this.padHex(new _jsbn.BigInteger(hexRandom, 16));\n\t\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      this.verifierDevices = this.padHex(verifierDevicesNotPadded);\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's public value A = g^a%N\n\t     * with the generated random number a\n\t     * @param {BigInteger} a Randomly generated small A.\n\t     * @returns {BigInteger} Computed large A.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's value U which is the hash of A and B\n\t     * @param {BigInteger} A Large A value.\n\t     * @param {BigInteger} B Server B value.\n\t     * @returns {BigInteger} Computed U value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a bitArray\n\t     * @param {Buffer} buf Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(buf) {\n\t      var hashHex = _awsSdk.util.crypto.sha256(buf, 'hex');\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a hex string\n\t     * @param {String} hexStr Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      return this.hash(new _awsSdk.util.Buffer(hexStr, 'hex'));\n\t    }\n\t\n\t    /**\n\t     * Standard hkdf algorithm\n\t     * @param {Buffer} ikm Input key material.\n\t     * @param {Buffer} salt Salt value.\n\t     * @returns {Buffer} Strong key material.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var prk = _awsSdk.util.crypto.hmac(salt, ikm, 'buffer', 'sha256');\n\t      var infoBitsUpdate = _awsSdk.util.buffer.concat([this.infoBits, new _awsSdk.util.Buffer(String.fromCharCode(1), 'utf8')]);\n\t      var hmac = _awsSdk.util.crypto.hmac(prk, infoBitsUpdate, 'buffer', 'sha256');\n\t      return hmac.slice(0, 16);\n\t    }\n\t\n\t    /**\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\n\t     * @param {String} username Username.\n\t     * @param {String} password Password.\n\t     * @param {BigInteger} serverBValue Server B value.\n\t     * @param {BigInteger} salt Generated salt.\n\t     * @returns {Buffer} Computed HKDF value.\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var hkdf = this.computehkdf(new _awsSdk.util.Buffer(this.padHex(sValue), 'hex'), new _awsSdk.util.Buffer(this.padHex(this.UHexHash), 'hex'));\n\t\n\t      return hkdf;\n\t    }\n\t\n\t    /**\n\t    * Return constant newPasswordRequiredChallengeUserAttributePrefix\n\t    * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n\t    */\n\t\n\t  }, {\n\t    key: 'getNewPasswordRequiredChallengeUserAttributePrefix',\n\t    value: function getNewPasswordRequiredChallengeUserAttributePrefix() {\n\t      return newPasswordRequiredChallengeUserAttributePrefix;\n\t    }\n\t\n\t    /**\n\t     * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n\t     * @param {BigInteger|String} Number or string to pad.\n\t     * @returns {String} Padded hex string.\n\t     */\n\t\n\t  }, {\n\t    key: 'padHex',\n\t    value: function padHex(bigInt) {\n\t      var hashStr = bigInt.toString(16);\n\t      if (hashStr.length % 2 === 1) {\n\t        hashStr = '0' + hashStr;\n\t      } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n\t        hashStr = '00' + hashStr;\n\t      }\n\t      return hashStr;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(_awsSdk.util.base64.decode(payload).toString('utf8'));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * License. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * for the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(_awsSdk.util.base64.decode(payload).toString('utf8'));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @callback nodeCallback\n\t * @template T result\n\t * @param {*} err The operation failure reason, or null.\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback onFailure\n\t * @param {*} err Failure reason.\n\t */\n\t\n\t/**\n\t * @callback onSuccess\n\t * @template T result\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback mfaRequired\n\t * @param {*} details MFA challenge details.\n\t */\n\t\n\t/**\n\t * @callback customChallenge\n\t * @param {*} details Custom challenge details.\n\t */\n\t\n\t/**\n\t * @callback inputVerificationCode\n\t * @param {*} data Server response.\n\t */\n\t\n\t/**\n\t * @callback authSuccess\n\t * @param {CognitoUserSession} session The new session.\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\n\t   * Constructs a new CognitoUser object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.Username The user's username.\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoUserSession} the current session for this user\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's username\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {String} the authentication flow type\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * sets authentication flow type\n\t     * @param {string} authenticationFlowType New value.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n\t     * stuff\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {newPasswordRequired} callback.newPasswordRequired new\n\t     *        password and any required attributes are required to continue\n\t     * @param {mfaRequired} callback.mfaRequired MFA code\n\t     *        required to continue.\n\t     * @param {customChallenge} callback.customChallenge Custom challenge\n\t     *        response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1]);\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t\n\t        var dateNow = dateHelper.getNowString();\n\t\n\t        var signatureString = _awsSdk.util.crypto.hmac(hkdf, _awsSdk.util.buffer.concat([new _awsSdk.util.Buffer(_this.pool.getUserPoolId().split('_')[1], 'utf8'), new _awsSdk.util.Buffer(_this.username, 'utf8'), new _awsSdk.util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'), new _awsSdk.util.Buffer(dateNow, 'utf8')]), 'base64', 'sha256');\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t          return _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t              challengeResponses.DEVICE_KEY = null;\n\t              _this.deviceKey = null;\n\t              _this.randomPassword = null;\n\t              _this.deviceGroupKey = null;\n\t              _this.clearCachedDeviceKeyAndPassword();\n\t              return respondToAuthChallenge(challenge, challengeCallback);\n\t            }\n\t            return challengeCallback(errChallenge, dataChallenge);\n\t          });\n\t        };\n\t\n\t        respondToAuthChallenge({\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            var userAttributes = null;\n\t            var rawRequiredAttributes = null;\n\t            var requiredAttributes = [];\n\t            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t            if (dataAuthenticate.ChallengeParameters) {\n\t              userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t              rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t            }\n\t\n\t            if (rawRequiredAttributes) {\n\t              for (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t                requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t              }\n\t            }\n\t            return callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t          }\n\t          return _this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t    * PRIVATE ONLY: This is an internal only method and should not\n\t    * be directly called by the consumers.\n\t    * @param {object} dataAuthenticate authentication data\n\t    * @param {object} authenticationHelper helper created\n\t    * @param {callback} callback passed on from caller\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'authenticateUserInternal',\n\t    value: function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t      var _this2 = this;\n\t\n\t      var challengeName = dataAuthenticate.ChallengeName;\n\t      var challengeParameters = dataAuthenticate.ChallengeParameters;\n\t\n\t      if (challengeName === 'SMS_MFA') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.mfaRequired(challengeName, challengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'CUSTOM_CHALLENGE') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.customChallenge(challengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'DEVICE_SRP_AUTH') {\n\t        this.getDeviceResponse(callback);\n\t        return undefined;\n\t      }\n\t\n\t      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t      this.cacheTokens();\n\t\n\t      var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t      if (newDeviceMetadata == null) {\n\t        return callback.onSuccess(this.signInUserSession);\n\t      }\n\t\n\t      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t      var deviceSecretVerifierConfig = {\n\t        Salt: new _awsSdk.util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t        PasswordVerifier: new _awsSdk.util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t      };\n\t\n\t      this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t      this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t      this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t      this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t        DeviceKey: newDeviceMetadata.DeviceKey,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t        DeviceName: navigator.userAgent\n\t      }, function (errConfirm, dataConfirm) {\n\t        if (errConfirm) {\n\t          return callback.onFailure(errConfirm);\n\t        }\n\t\n\t        _this2.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t        _this2.cacheDeviceKeyAndPassword();\n\t        if (dataConfirm.UserConfirmationNecessary === true) {\n\t          return callback.onSuccess(_this2.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t        }\n\t        return callback.onSuccess(_this2.signInUserSession);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t    * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n\t    * Pass the new password with any new user attributes to be updated.\n\t    * User attribute keys must be of format userAttributes.<attribute_name>.\n\t    * @param {string} newPassword new password for this user\n\t    * @param {object} requiredAttributeData map with values for all required attributes\n\t    * @param {object} callback Result callback map.\n\t    * @param {onFailure} callback.onFailure Called on any error.\n\t    * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n\t    * @param {customChallenge} callback.customChallenge Custom challenge\n\t    *         response required to continue.\n\t    * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'completeNewPasswordChallenge',\n\t    value: function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n\t      var _this3 = this;\n\t\n\t      if (!newPassword) {\n\t        return callback.onFailure(new Error('New password is required.'));\n\t      }\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1]);\n\t      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t      var finalUserAttributes = {};\n\t      if (requiredAttributeData) {\n\t        Object.keys(requiredAttributeData).forEach(function (key) {\n\t          finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t        });\n\t      }\n\t\n\t      finalUserAttributes.NEW_PASSWORD = newPassword;\n\t      finalUserAttributes.USERNAME = this.username;\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: finalUserAttributes,\n\t        Session: this.Session\n\t      }, function (errAuthenticate, dataAuthenticate) {\n\t        if (errAuthenticate) {\n\t          return callback.onFailure(errAuthenticate);\n\t        }\n\t        return _this3.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session using device authentication. It is called at the end of user\n\t     * authentication\n\t     *\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this4 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey);\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this4.deviceKey, _this4.randomPassword, serverBValue, salt);\n\t\n\t        var dateNow = dateHelper.getNowString();\n\t\n\t        var signatureString = _awsSdk.util.crypto.hmac(hkdf, _awsSdk.util.buffer.concat([new _awsSdk.util.Buffer(_this4.deviceGroupKey, 'utf8'), new _awsSdk.util.Buffer(_this4.deviceKey, 'utf8'), new _awsSdk.util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'), new _awsSdk.util.Buffer(dateNow, 'utf8')]), 'base64', 'sha256');\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this4.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this4.deviceKey;\n\t\n\t        _this4.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this4.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this4.cacheTokens();\n\t\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has the responses to a custom challenge\n\t     * @param {string} answerChallenge The custom challange answer.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {customChallenge} callback.customChallenge\n\t     *    Custom challenge response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this5 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this5.Session = data.Session;\n\t          return callback.customChallenge(data.ChallengeParameters);\n\t        }\n\t\n\t        _this5.signInUserSession = _this5.getCognitoUserSession(data.AuthenticationResult);\n\t        _this5.cacheTokens();\n\t        return callback.onSuccess(_this5.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has an MFA code\n\t     * @param {string} confirmationCode The MFA code entered by the user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this6 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = dataAuthenticate.ChallengeName;\n\t\n\t        if (challengeName === 'DEVICE_SRP_AUTH') {\n\t          _this6.getDeviceResponse(callback);\n\t          return undefined;\n\t        }\n\t\n\t        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this6.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this6.pool.getUserPoolId().split('_')[1]);\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: new _awsSdk.util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t          PasswordVerifier: new _awsSdk.util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t        };\n\t\n\t        _this6.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t        _this6.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this6.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this6.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this6.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this6.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this6.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this6.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to change the current password\n\t     * @param {string} oldUserPassword The current password.\n\t     * @param {string} newUserPassword The requested new password.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to enable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to disable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n\t     */\n\t    /**\n\t     * This is used by an authenticated user to change a list of attributes\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get a list of attributes\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get the MFAOptions\n\t     * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getMFAOptions',\n\t    value: function getMFAOptions(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        return callback(null, userData.MFAOptions);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete a list of attributes\n\t     * @param {string[]} attributeList Names of the attributes to delete.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by a user to resend a confirmation code\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session, either from the session object\n\t     * or from  the local storage, or by using a refresh token\n\t     *\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This uses the refreshToken to retrieve a new session\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this8 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(lastUserKey)) {\n\t        this.username = storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          if (err.code === 'NotAuthorizedException') {\n\t            _this8.clearCachedTokens();\n\t          }\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this8.signInUserSession = _this8.getCognitoUserSession(authenticationResult);\n\t          _this8.cacheTokens();\n\t          return callback(null, _this8.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to save the session tokens to local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\n\t     * This is used to cache the device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(deviceKeyKey, this.deviceKey);\n\t      storage.setItem(randomPasswordKey, this.randomPassword);\n\t      storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to get current device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        this.randomPassword = storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the device key info from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(deviceKeyKey);\n\t      storage.removeItem(randomPasswordKey);\n\t      storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the session tokens from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(idTokenKey);\n\t      storage.removeItem(accessTokenKey);\n\t      storage.removeItem(refreshTokenKey);\n\t      storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to build a user session from tokens retrieved in the authentication result\n\t     * @param {object} authResult Successful auth response from server.\n\t     * @returns {CognitoUserSession} The new user session.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate a forgot password request\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\n\t     *    Optional callback raised instead of onSuccess with response data.\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm a new password using a confirmationCode\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {string} newPassword Confirm new password.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate an attribute confirmation request\n\t     * @param {string} attributeName User attribute that needs confirmation.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm an attribute using a confirmation code\n\t     * @param {string} attributeName Attribute being confirmed.\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get the device information using the current device key\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget a specific device\n\t     * @param {string} deviceKey Device key.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetSpecificDevice',\n\t    value: function forgetSpecificDevice(deviceKey, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget the current device\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this9 = this;\n\t\n\t      this.forgetSpecificDevice(this.deviceKey, {\n\t        onFailure: callback.onFailure,\n\t        onSuccess: function onSuccess(result) {\n\t          _this9.deviceKey = null;\n\t          _this9.deviceGroupKey = null;\n\t          _this9.randomPassword = null;\n\t          _this9.clearCachedDeviceKeyAndPassword();\n\t          return callback.onSuccess(result);\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as not remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to list all devices for a user\n\t     *\n\t     * @param {int} limit the number of devices returned in a call\n\t     * @param {string} paginationToken the pagination token in case any was returned before\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to globally revoke all tokens issued to a user\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this10 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this10.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\n\t   * Constructs a new CognitoUserAttribute object\n\t   * @param {string=} Name The record's name\n\t   * @param {string=} Value The record's value\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        Name = _ref.Name,\n\t        Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's value.\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's value.\n\t     * @param {string} value The new value.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's name.\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's name\n\t     * @param {string} name The new name.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} a string representation of the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\n\t     * @returns {object} a flat object representing the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {string} IdToken The session's Id token.\n\t   * @param {string=} RefreshToken The session's refresh token.\n\t   * @param {string} AccessToken The session's access token.\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoRefreshToken} the session's refresh token\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAccessToken} the session's access token\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\n\t     * Checks to see if the session is still valid based on session expiry information found\n\t     * in tokens and the current time\n\t     * @returns {boolean} if the session is still valid\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  _createClass(DateHelper, [{\n\t    key: 'getNowString',\n\t\n\t    /**\n\t     * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t     */\n\t    value: function getNowString() {\n\t      var now = new Date();\n\t\n\t      var weekDay = weekNames[now.getUTCDay()];\n\t      var month = monthNames[now.getUTCMonth()];\n\t      var day = now.getUTCDate();\n\t\n\t      var hours = now.getUTCHours();\n\t      if (hours < 10) {\n\t        hours = '0' + hours;\n\t      }\n\t\n\t      var minutes = now.getUTCMinutes();\n\t      if (minutes < 10) {\n\t        minutes = '0' + minutes;\n\t      }\n\t\n\t      var seconds = now.getUTCSeconds();\n\t      if (seconds < 10) {\n\t        seconds = '0' + seconds;\n\t      }\n\t\n\t      var year = now.getUTCFullYear();\n\t\n\t      // ddd MMM D HH:mm:ss UTC YYYY\n\t      var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t      return dateNow;\n\t    }\n\t  }]);\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar dataMemory = {};\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  _createClass(MemoryStorage, null, [{\n\t    key: 'setItem',\n\t\n\t\n\t    /**\n\t     * This is used to set a specific item in storage\n\t     * @param {string} key - the key for the item\n\t     * @param {object} value - the value\n\t     * @returns {string} value that was set\n\t     */\n\t    value: function setItem(key, value) {\n\t      dataMemory[key] = value;\n\t      return dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to get a specific key from storage\n\t     * @param {string} key - the key for the item\n\t     * This is used to clear the storage\n\t     * @returns {string} the data item\n\t     */\n\t\n\t  }, {\n\t    key: 'getItem',\n\t    value: function getItem(key) {\n\t      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to remove an item from storage\n\t     * @param {string} key - the key being set\n\t     * @returns {string} value - value that was deleted\n\t     */\n\t\n\t  }, {\n\t    key: 'removeItem',\n\t    value: function removeItem(key) {\n\t      return delete dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the storage\n\t     * @returns {string} nothing\n\t     */\n\t\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      dataMemory = {};\n\t      return dataMemory;\n\t    }\n\t  }]);\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t\n\t  /**\n\t   * This is used to get a storage object\n\t   * @returns {object} the storage\n\t   */\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      this.storageWindow = window.sessionStorage;\n\t      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n\t      this.storageWindow.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      this.storageWindow = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to return the storage\n\t   * @returns {object} the storage\n\t   */\n\t\n\t\n\t  _createClass(StorageHelper, [{\n\t    key: 'getStorage',\n\t    value: function getStorage() {\n\t      return this.storageWindow;\n\t    }\n\t  }]);\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\n\t   * Constructs a new AuthenticationDetails object\n\t   * @param {object=} data Creation options.\n\t   * @param {string} data.Username User being authenticated.\n\t   * @param {string} data.Password Plain-text password to authenticate with.\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {},\n\t        ValidationData = _ref.ValidationData,\n\t        Username = _ref.Username,\n\t        Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's username\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's password\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\n\t     * @returns {Array} the record's validationData\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\t\n\tvar _awsSdk = __webpack_require__(1);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\n\t   * Constructs a new CognitoUserPool object\n\t   * @param {object} data Creation options.\n\t   * @param {string} data.UserPoolId Cognito user pool id.\n\t   * @param {string} data.ClientId User pool application client id.\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {},\n\t        UserPoolId = _ref.UserPoolId,\n\t        ClientId = _ref.ClientId;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t\n\t    this.client = new _awsSdk.CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region: region });\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the user pool id\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the client id\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\n\t     * @typedef {object} SignUpResult\n\t     * @property {CognitoUser} user New user.\n\t     * @property {bool} userConfirmed If the user is already confirmed.\n\t     */\n\t    /**\n\t     * method for signing up a user\n\t     * @param {string} username User's username.\n\t     * @param {string} password Plain-text initial password entered by user.\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * method for getting the current user of the application from the local storage\n\t     *\n\t     * @returns {CognitoUser} the user retrieved from storage\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      var lastAuthUser = storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-identity.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f1d89c5d6f3c96a74258","import { CognitoIdentityServiceProvider } from 'aws-sdk';\nimport * as enhancements from './src';\n\nexport * from './src';\n\nObject.keys(enhancements).forEach(key => {\n  CognitoIdentityServiceProvider[key] = enhancements[key];\n});\n\n// The version of crypto-browserify included by aws-sdk only\n// checks for window.crypto, not window.msCrypto as used by\n// IE 11 – so we set it explicitly here\nif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n  window.crypto = window.msCrypto;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./enhance.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk\",\"commonjs\":\"aws-sdk\",\"amd\":\"aws-sdk\"}\n// module id = 1\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk';\nimport { BigInteger } from 'jsbn';\n\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\nconst newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nexport default class AuthenticationHelper {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  constructor(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2');\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\n\n    this.smallAValue = this.generateRandomSmallA();\n    this.largeAValue = this.calculateA(this.smallAValue);\n\n    this.infoBits = new util.Buffer('Caldera Derived Key', 'utf8');\n\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @returns {BigInteger} large A, a value generated from small A\n   */\n  getLargeAValue() {\n    return this.largeAValue;\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  generateRandomSmallA() {\n    const hexRandom = util.crypto.lib.randomBytes(128).toString('hex');\n\n    const randomBigInt = new BigInteger(hexRandom, 16);\n    const smallABigInt = randomBigInt.mod(this.N);\n\n    return smallABigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  generateRandomString() {\n    return util.crypto.lib.randomBytes(40).toString('base64');\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @returns {void}\n   */\n  generateHashDevice(deviceGroupKey, username) {\n    this.randomPassword = this.generateRandomString();\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n    const hashedString = this.hash(combinedString);\n\n    const hexRandom = util.crypto.lib.randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n\n    const verifierDevicesNotPadded = this.g.modPow(\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\n      this.N);\n\n    this.verifierDevices = this.padHex(verifierDevicesNotPadded);\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @returns {BigInteger} Computed large A.\n   * @private\n   */\n  calculateA(a) {\n    const A = this.g.modPow(a, this.N);\n\n    if (A.mod(this.N).toString() === '0') {\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\n    }\n    return A;\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    const finalU = new BigInteger(this.UHexHash, 16);\n\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hash(buf) {\n    const hashHex = util.crypto.sha256(buf, 'hex');\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hexHash(hexStr) {\n    return this.hash(new util.Buffer(hexStr, 'hex'));\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n  computehkdf(ikm, salt) {\n    const prk = util.crypto.hmac(salt, ikm, 'buffer', 'sha256');\n    const infoBitsUpdate = util.buffer.concat([\n      this.infoBits,\n      new util.Buffer(String.fromCharCode(1), 'utf8'),\n    ]);\n    const hmac = util.crypto.hmac(prk, infoBitsUpdate, 'buffer', 'sha256');\n    return hmac.slice(0, 16);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @returns {Buffer} Computed HKDF value.\n   */\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(new BigInteger('0', 16))) {\n      throw new Error('U cannot be zero.');\n    }\n\n    const usernamePassword = `${this.poolName}${username}:${password}`;\n    const usernamePasswordHash = this.hash(usernamePassword);\n\n    const xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n\n    const gModPowXN = this.g.modPow(xValue, this.N);\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n    const sValue = intValue2.modPow(\n      this.smallAValue.add(this.UValue.multiply(xValue)),\n      this.N\n    ).mod(this.N);\n\n    const hkdf = this.computehkdf(\n      new util.Buffer(this.padHex(sValue), 'hex'),\n      new util.Buffer(this.padHex(this.UHexHash), 'hex'));\n\n    return hkdf;\n  }\n\n  /**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n  getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n  padHex(bigInt) {\n    let hashStr = bigInt.toString(16);\n    if (hashStr.length % 2 === 1) {\n      hashStr = `0${hashStr}`;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = `00${hashStr}`;\n    }\n    return hashStr;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationHelper.js","/*\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk';\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor({ AccessToken } = {}) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAccessToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk';\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor({ IdToken } = {}) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoIdToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor({ RefreshToken } = {}) {\n    // Assign object\n    this.token = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.token;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoRefreshToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk';\nimport { BigInteger } from 'jsbn';\n\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n\n/** @class */\nexport default class CognitoUser {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   */\n  constructor(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n\n    this.client = data.Pool.client;\n\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n  getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  authenticateUser(authDetails, callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1]);\n    const dateHelper = new DateHelper();\n\n    let serverBValue;\n    let salt;\n    const authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n      authParameters.CHALLENGE_NAME = 'SRP_A';\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      AuthFlow: this.authenticationFlowType,\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      this.username = challengeParameters.USER_ID_FOR_SRP;\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      salt = new BigInteger(challengeParameters.SALT, 16);\n      this.getCachedDeviceKeyAndPassword();\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.username,\n        authDetails.getPassword(),\n        serverBValue,\n        salt);\n\n      const dateNow = dateHelper.getNowString();\n\n      const signatureString = util.crypto.hmac(hkdf, util.buffer.concat([\n        new util.Buffer(this.pool.getUserPoolId().split('_')[1], 'utf8'),\n        new util.Buffer(this.username, 'utf8'),\n        new util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'),\n        new util.Buffer(dateNow, 'utf8')\n      ]), 'base64', 'sha256')\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n      if (this.deviceKey != null) {\n        challengeResponses.DEVICE_KEY = this.deviceKey;\n      }\n\n      const respondToAuthChallenge = (challenge, challengeCallback) =>\n        this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge,\n          (errChallenge, dataChallenge) => {\n            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' &&\n                errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n              challengeResponses.DEVICE_KEY = null;\n              this.deviceKey = null;\n              this.randomPassword = null;\n              this.deviceGroupKey = null;\n              this.clearCachedDeviceKeyAndPassword();\n              return respondToAuthChallenge(challenge, challengeCallback);\n            }\n            return challengeCallback(errChallenge, dataChallenge);\n          });\n\n      respondToAuthChallenge({\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        const challengeName = dataAuthenticate.ChallengeName;\n        if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n          this.Session = dataAuthenticate.Session;\n          let userAttributes = null;\n          let rawRequiredAttributes = null;\n          const requiredAttributes = [];\n          const userAttributesPrefix = authenticationHelper\n            .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n          if (dataAuthenticate.ChallengeParameters) {\n            userAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.userAttributes);\n            rawRequiredAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.requiredAttributes);\n          }\n\n          if (rawRequiredAttributes) {\n            for (let i = 0; i < rawRequiredAttributes.length; i++) {\n              requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n            }\n          }\n          return callback.newPasswordRequired(userAttributes, requiredAttributes);\n        }\n        return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n  authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    const challengeName = dataAuthenticate.ChallengeName;\n    const challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.cacheTokens();\n\n    const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n    const deviceSecretVerifierConfig = {\n      Salt: new util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n      PasswordVerifier: new util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64'),\n    };\n\n    this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n    this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n    this.randomPassword = authenticationHelper.getRandomPassword();\n\n    this.client.makeUnauthenticatedRequest('confirmDevice', {\n      DeviceKey: newDeviceMetadata.DeviceKey,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n      DeviceName: navigator.userAgent,\n    }, (errConfirm, dataConfirm) => {\n      if (errConfirm) {\n        return callback.onFailure(errConfirm);\n      }\n\n      this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n      this.cacheDeviceKeyAndPassword();\n      if (dataConfirm.UserConfirmationNecessary === true) {\n        return callback.onSuccess(\n          this.signInUserSession, dataConfirm.UserConfirmationNecessary);\n      }\n      return callback.onSuccess(this.signInUserSession);\n    });\n    return undefined;\n  }\n\n  /**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n  completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1]);\n    const userAttributesPrefix = authenticationHelper\n      .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n    const finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach((key) => {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n    }, (errAuthenticate, dataAuthenticate) => {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n  getDeviceResponse(callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.deviceGroupKey);\n    const dateHelper = new DateHelper();\n\n    const authParameters = {};\n\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'DEVICE_SRP_AUTH',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: authParameters,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      const salt = new BigInteger(challengeParameters.SALT, 16);\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.deviceKey,\n        this.randomPassword,\n        serverBValue,\n        salt);\n\n      const dateNow = dateHelper.getNowString();\n\n      const signatureString = util.crypto.hmac(hkdf, util.buffer.concat([\n        new util.Buffer(this.deviceGroupKey, 'utf8'),\n        new util.Buffer(this.deviceKey, 'utf8'),\n        new util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'),\n        new util.Buffer(dateNow, 'utf8')\n      ]), 'base64', 'sha256')\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n        this.cacheTokens();\n\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challange answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendCustomChallengeAnswer(answerChallenge, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = data.ChallengeName;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        this.Session = data.Session;\n        return callback.customChallenge(data.ChallengeParameters);\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\n      this.cacheTokens();\n      return callback.onSuccess(this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendMFACode(confirmationCode, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'SMS_MFA',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, dataAuthenticate) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        this.getDeviceResponse(callback);\n        return undefined;\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      this.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(this.signInUserSession);\n      }\n\n      const authenticationHelper = new AuthenticationHelper(\n        this.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n      const deviceSecretVerifierConfig = {\n        Salt: new util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: new util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64'),\n      };\n\n      this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\n        .NewDeviceMetadata.DeviceGroupKey;\n      this.randomPassword = authenticationHelper.getRandomPassword();\n\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent,\n      }, (errConfirm, dataConfirm) => {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        this.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(\n            this.signInUserSession,\n            dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('changePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n    const mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number',\n    };\n    mfaOptions.push(mfaEnabled);\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n\n  /**\n   * This is used by an authenticated user to delete himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteUser(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      this.clearCachedTokens();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const attributeList = [];\n\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\n        const attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value,\n        };\n        const userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  resendConfirmationCode(callback) {\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const idTokenKey = `${keyPrefix}.idToken`;\n    const accessTokenKey = `${keyPrefix}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\n\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(idTokenKey)) {\n      const idToken = new CognitoIdToken({\n        IdToken: storage.getItem(idTokenKey),\n      });\n      const accessToken = new CognitoAccessToken({\n        AccessToken: storage.getItem(accessTokenKey),\n      });\n      const refreshToken = new CognitoRefreshToken({\n        RefreshToken: storage.getItem(refreshTokenKey),\n      });\n\n      const sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n      };\n      const cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (refreshToken.getToken() == null) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    }\n    return undefined;\n  }\n\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  refreshSession(refreshToken, callback) {\n    const authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(lastUserKey)) {\n      this.username = storage.getItem(lastUserKey);\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n    }, (err, authResult) => {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          this.clearCachedTokens();\n        }\n        return callback(err, null);\n      }\n      if (authResult) {\n        const authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\n        this.cacheTokens();\n        return callback(null, this.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  cacheTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  cacheDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.setItem(deviceKeyKey, this.deviceKey);\n    storage.setItem(randomPasswordKey, this.randomPassword);\n    storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  getCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(deviceKeyKey)) {\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      this.randomPassword = storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  clearCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.removeItem(deviceKeyKey);\n    storage.removeItem(randomPasswordKey);\n    storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  clearCachedTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.removeItem(idTokenKey);\n    storage.removeItem(accessTokenKey);\n    storage.removeItem(refreshTokenKey);\n    storage.removeItem(lastUserKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  getCognitoUserSession(authResult) {\n    const idToken = new CognitoIdToken(authResult);\n    const accessToken = new CognitoAccessToken(authResult);\n    const refreshToken = new CognitoRefreshToken(authResult);\n\n    const sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n    };\n\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgotPassword(callback) {\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  confirmPassword(confirmationCode, newPassword, callback) {\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n  getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.inputVerificationCode(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetDevice(callback) {\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: result => {\n        this.deviceKey = null;\n        this.deviceGroupKey = null;\n        this.randomPassword = null;\n        this.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      },\n    });\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('listDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  globalSignOut(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      this.clearCachedTokens();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  signOut() {\n    this.signInUserSession = null;\n    this.clearCachedTokens();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUser.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserAttribute {\n  /**\n   * Constructs a new CognitoUserAttribute object\n   * @param {string=} Name The record's name\n   * @param {string=} Value The record's value\n   */\n  constructor({ Name, Value } = {}) {\n    this.Name = Name || '';\n    this.Value = Value || '';\n  }\n\n  /**\n   * @returns {string} the record's value.\n   */\n  getValue() {\n    return this.Value;\n  }\n\n  /**\n   * Sets the record's value.\n   * @param {string} value The new value.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setValue(value) {\n    this.Value = value;\n    return this;\n  }\n\n  /**\n   * @returns {string} the record's name.\n   */\n  getName() {\n    return this.Name;\n  }\n\n  /**\n   * Sets the record's name\n   * @param {string} name The new name.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setName(name) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * @returns {string} a string representation of the record.\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * @returns {object} a flat object representing the record.\n   */\n  toJSON() {\n    return {\n      Name: this.Name,\n      Value: this.Value,\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserAttribute.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserSession {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {string} IdToken The session's Id token.\n   * @param {string=} RefreshToken The session's refresh token.\n   * @param {string} AccessToken The session's access token.\n   */\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserSession.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DateHelper.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet dataMemory = {};\n\n/** @class */\nclass MemoryStorage {\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n  static setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  }\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n  static getItem(key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  }\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n  static removeItem(key) {\n    return delete dataMemory[key];\n  }\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n  static clear() {\n    dataMemory = {};\n    return dataMemory;\n  }\n}\n\n/** @class */\nexport default class StorageHelper {\n\n  /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */\n  constructor() {\n    try {\n      this.storageWindow = window.sessionStorage;\n      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n      this.storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n\n  /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */\n  getStorage() {\n    return this.storageWindow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StorageHelper.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n// module id = 11\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class AuthenticationDetails {\n  /**\n   * Constructs a new AuthenticationDetails object\n   * @param {object=} data Creation options.\n   * @param {string} data.Username User being authenticated.\n   * @param {string} data.Password Plain-text password to authenticate with.\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n   */\n  constructor(data) {\n    const { ValidationData, Username, Password } = data || {};\n    this.validationData = ValidationData || [];\n    this.username = Username;\n    this.password = Password;\n  }\n\n  /**\n   * @returns {string} the record's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {string} the record's password\n   */\n  getPassword() {\n    return this.password;\n  }\n\n  /**\n   * @returns {Array} the record's validationData\n   */\n  getValidationData() {\n    return this.validationData;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationDetails.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CognitoIdentityServiceProvider } from 'aws-sdk';\n\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n\n/** @class */\nexport default class CognitoUserPool {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   */\n  constructor(data) {\n    const { UserPoolId, ClientId } = data || {};\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    const region = UserPoolId.split('_')[0];\n\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\n  }\n\n  /**\n   * @returns {string} the user pool id\n   */\n  getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\n   * @returns {string} the client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  signUp(username, password, userAttributes, validationData, callback) {\n    this.client.makeUnauthenticatedRequest('signUp', {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n    }, (err, data) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const cognitoUser = {\n        Username: username,\n        Pool: this,\n      };\n\n      const returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n      };\n\n      return callback(null, returnData);\n    });\n  }\n\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  getCurrentUser() {\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n    const storage = new StorageHelper().getStorage();\n\n    const lastAuthUser = storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      const cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n      };\n\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserPool.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default as AuthenticationDetails } from './AuthenticationDetails';\nexport { default as AuthenticationHelper } from './AuthenticationHelper';\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\nexport { default as CognitoIdToken } from './CognitoIdToken';\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\nexport { default as CognitoUser } from './CognitoUser';\nexport { default as CognitoUserAttribute } from './CognitoUserAttribute';\nexport { default as CognitoUserPool } from './CognitoUserPool';\nexport { default as CognitoUserSession } from './CognitoUserSession';\nexport { default as DateHelper } from './DateHelper';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap 03508c239c5db8678652","webpack:///./enhance.js","webpack:///external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk/global\",\"commonjs\":\"aws-sdk/global\",\"amd\":\"aws-sdk/global\"}","webpack:///./src/AuthenticationHelper.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoUser.js","webpack:///./src/CognitoUserAttribute.js","webpack:///./src/CognitoUserSession.js","webpack:///./src/DateHelper.js","webpack:///./src/StorageHelper.js","webpack:///external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}","webpack:///external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./src/AuthenticationDetails.js","webpack:///./src/CognitoUserPool.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","require","define","amd","AmazonCognitoIdentity","AWSCognito","CognitoIdentityServiceProvider","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_12__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","defineProperty","value","_src","keys","forEach","enumerable","get","_cognitoidentityserviceprovider","_cognitoidentityserviceprovider2","enhancements","window","crypto","msCrypto","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_global","_jsbn","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","util","Buffer","poolName","hexRandom","lib","randomBytes","randomBigInt","smallABigInt","mod","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","padHex","verifierDevicesNotPadded","modPow","a","A","Error","B","UHexHash","finalU","buf","hashHex","sha256","Array","join","hexStr","ikm","salt","prk","hmac","infoBitsUpdate","buffer","concat","String","fromCharCode","slice","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","hkdf","computehkdf","bigInt","hashStr","indexOf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64","decode","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","_StorageHelper","_StorageHelper2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","storage","getStorage","authDetails","callback","_this","authenticationHelper","getUserPoolId","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","dateNow","getNowString","signatureString","SECRET_BLOCK","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","message","toLowerCase","clearCachedDeviceKeyAndPassword","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","substr","newPasswordRequired","authenticateUserInternal","_this2","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","newPassword","requiredAttributeData","_this3","finalUserAttributes","NEW_PASSWORD","_this4","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this5","ANSWER","_this6","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","_this7","clearCachedTokens","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this8","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","Password","attributeName","Code","_this9","forgetSpecificDevice","result","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this10","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","dataMemory","MemoryStorage","StorageHelper","storageWindow","localStorage","exception","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","test","region","userPoolId","clientId","apiVersion","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk/global\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk/global\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(15);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _cognitoidentityserviceprovider2.default[key] = enhancements[key];\n\t});\n\t\n\t// The version of crypto-browserify included by aws-sdk only\n\t// checks for window.crypto, not window.msCrypto as used by\n\t// IE 11 – so we set it explicitly here\n\tif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n\t  window.crypto = window.msCrypto;\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * for the specific language governing permissions and\n\tlimitations under the License.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\t\n\tvar _global = __webpack_require__(1);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\tvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\n\t   * Constructs a new AuthenticationHelper object\n\t   * @param {string} PoolName Cognito user pool name.\n\t   */\n\t  function AuthenticationHelper(PoolName) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = new _global.util.Buffer('Caldera Derived Key', 'utf8');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\n\t   * @returns {BigInteger} small A, a random number\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\n\t     * @returns {BigInteger} large A, a value generated from small A\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random big integer\n\t     * @returns {BigInteger} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var hexRandom = _global.util.crypto.lib.randomBytes(128).toString('hex');\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random string\n\t     * @returns {string} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      return _global.util.crypto.lib.randomBytes(40).toString('base64');\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in password hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in devices hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Value used to verify devices.\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\n\t     * Generate salts and compute verifier.\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\n\t     * @param {string} username User to generate verifier for.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var hexRandom = _global.util.crypto.lib.randomBytes(16).toString('hex');\n\t      this.SaltToHashDevices = this.padHex(new _jsbn.BigInteger(hexRandom, 16));\n\t\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      this.verifierDevices = this.padHex(verifierDevicesNotPadded);\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's public value A = g^a%N\n\t     * with the generated random number a\n\t     * @param {BigInteger} a Randomly generated small A.\n\t     * @returns {BigInteger} Computed large A.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's value U which is the hash of A and B\n\t     * @param {BigInteger} A Large A value.\n\t     * @param {BigInteger} B Server B value.\n\t     * @returns {BigInteger} Computed U value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a bitArray\n\t     * @param {Buffer} buf Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(buf) {\n\t      var hashHex = _global.util.crypto.sha256(buf, 'hex');\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a hex string\n\t     * @param {String} hexStr Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      return this.hash(new _global.util.Buffer(hexStr, 'hex'));\n\t    }\n\t\n\t    /**\n\t     * Standard hkdf algorithm\n\t     * @param {Buffer} ikm Input key material.\n\t     * @param {Buffer} salt Salt value.\n\t     * @returns {Buffer} Strong key material.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var prk = _global.util.crypto.hmac(salt, ikm, 'buffer', 'sha256');\n\t      var infoBitsUpdate = _global.util.buffer.concat([this.infoBits, new _global.util.Buffer(String.fromCharCode(1), 'utf8')]);\n\t      var hmac = _global.util.crypto.hmac(prk, infoBitsUpdate, 'buffer', 'sha256');\n\t      return hmac.slice(0, 16);\n\t    }\n\t\n\t    /**\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\n\t     * @param {String} username Username.\n\t     * @param {String} password Password.\n\t     * @param {BigInteger} serverBValue Server B value.\n\t     * @param {BigInteger} salt Generated salt.\n\t     * @returns {Buffer} Computed HKDF value.\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var hkdf = this.computehkdf(new _global.util.Buffer(this.padHex(sValue), 'hex'), new _global.util.Buffer(this.padHex(this.UValue.toString(16)), 'hex'));\n\t\n\t      return hkdf;\n\t    }\n\t\n\t    /**\n\t    * Return constant newPasswordRequiredChallengeUserAttributePrefix\n\t    * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n\t    */\n\t\n\t  }, {\n\t    key: 'getNewPasswordRequiredChallengeUserAttributePrefix',\n\t    value: function getNewPasswordRequiredChallengeUserAttributePrefix() {\n\t      return newPasswordRequiredChallengeUserAttributePrefix;\n\t    }\n\t\n\t    /**\n\t     * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n\t     * @param {BigInteger|String} bigInt Number or string to pad.\n\t     * @returns {String} Padded hex string.\n\t     */\n\t\n\t  }, {\n\t    key: 'padHex',\n\t    value: function padHex(bigInt) {\n\t      var hashStr = bigInt.toString(16);\n\t      if (hashStr.length % 2 === 1) {\n\t        hashStr = '0' + hashStr;\n\t      } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n\t        hashStr = '00' + hashStr;\n\t      }\n\t      return hashStr;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _global = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(_global.util.base64.decode(payload).toString('utf8'));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Inc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _global = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(_global.util.base64.decode(payload).toString('utf8'));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _global = __webpack_require__(1);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @callback nodeCallback\n\t * @template T result\n\t * @param {*} err The operation failure reason, or null.\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback onFailure\n\t * @param {*} err Failure reason.\n\t */\n\t\n\t/**\n\t * @callback onSuccess\n\t * @template T result\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback mfaRequired\n\t * @param {*} details MFA challenge details.\n\t */\n\t\n\t/**\n\t * @callback customChallenge\n\t * @param {*} details Custom challenge details.\n\t */\n\t\n\t/**\n\t * @callback inputVerificationCode\n\t * @param {*} data Server response.\n\t */\n\t\n\t/**\n\t * @callback authSuccess\n\t * @param {CognitoUserSession} session The new session.\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\n\t   * Constructs a new CognitoUser object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.Username The user's username.\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t\n\t    this.storage = new _StorageHelper2.default().getStorage();\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoUserSession} the current session for this user\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's username\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {String} the authentication flow type\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * sets authentication flow type\n\t     * @param {string} authenticationFlowType New value.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n\t     * stuff\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {newPasswordRequired} callback.newPasswordRequired new\n\t     *        password and any required attributes are required to continue\n\t     * @param {mfaRequired} callback.mfaRequired MFA code\n\t     *        required to continue.\n\t     * @param {customChallenge} callback.customChallenge Custom challenge\n\t     *        response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1]);\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t\n\t        var dateNow = dateHelper.getNowString();\n\t\n\t        var signatureString = _global.util.crypto.hmac(hkdf, _global.util.buffer.concat([new _global.util.Buffer(_this.pool.getUserPoolId().split('_')[1], 'utf8'), new _global.util.Buffer(_this.username, 'utf8'), new _global.util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'), new _global.util.Buffer(dateNow, 'utf8')]), 'base64', 'sha256');\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t          return _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t              challengeResponses.DEVICE_KEY = null;\n\t              _this.deviceKey = null;\n\t              _this.randomPassword = null;\n\t              _this.deviceGroupKey = null;\n\t              _this.clearCachedDeviceKeyAndPassword();\n\t              return respondToAuthChallenge(challenge, challengeCallback);\n\t            }\n\t            return challengeCallback(errChallenge, dataChallenge);\n\t          });\n\t        };\n\t\n\t        respondToAuthChallenge({\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            var userAttributes = null;\n\t            var rawRequiredAttributes = null;\n\t            var requiredAttributes = [];\n\t            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t            if (dataAuthenticate.ChallengeParameters) {\n\t              userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t              rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t            }\n\t\n\t            if (rawRequiredAttributes) {\n\t              for (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t                requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t              }\n\t            }\n\t            return callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t          }\n\t          return _this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t    * PRIVATE ONLY: This is an internal only method and should not\n\t    * be directly called by the consumers.\n\t    * @param {object} dataAuthenticate authentication data\n\t    * @param {object} authenticationHelper helper created\n\t    * @param {callback} callback passed on from caller\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'authenticateUserInternal',\n\t    value: function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t      var _this2 = this;\n\t\n\t      var challengeName = dataAuthenticate.ChallengeName;\n\t      var challengeParameters = dataAuthenticate.ChallengeParameters;\n\t\n\t      if (challengeName === 'SMS_MFA') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.mfaRequired(challengeName, challengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'CUSTOM_CHALLENGE') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.customChallenge(challengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'DEVICE_SRP_AUTH') {\n\t        this.getDeviceResponse(callback);\n\t        return undefined;\n\t      }\n\t\n\t      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t      this.cacheTokens();\n\t\n\t      var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t      if (newDeviceMetadata == null) {\n\t        return callback.onSuccess(this.signInUserSession);\n\t      }\n\t\n\t      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t      var deviceSecretVerifierConfig = {\n\t        Salt: new _global.util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t        PasswordVerifier: new _global.util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t      };\n\t\n\t      this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t      this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t      this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t      this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t        DeviceKey: newDeviceMetadata.DeviceKey,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t        DeviceName: navigator.userAgent\n\t      }, function (errConfirm, dataConfirm) {\n\t        if (errConfirm) {\n\t          return callback.onFailure(errConfirm);\n\t        }\n\t\n\t        _this2.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t        _this2.cacheDeviceKeyAndPassword();\n\t        if (dataConfirm.UserConfirmationNecessary === true) {\n\t          return callback.onSuccess(_this2.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t        }\n\t        return callback.onSuccess(_this2.signInUserSession);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t    * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n\t    * Pass the new password with any new user attributes to be updated.\n\t    * User attribute keys must be of format userAttributes.<attribute_name>.\n\t    * @param {string} newPassword new password for this user\n\t    * @param {object} requiredAttributeData map with values for all required attributes\n\t    * @param {object} callback Result callback map.\n\t    * @param {onFailure} callback.onFailure Called on any error.\n\t    * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n\t    * @param {customChallenge} callback.customChallenge Custom challenge\n\t    *         response required to continue.\n\t    * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'completeNewPasswordChallenge',\n\t    value: function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n\t      var _this3 = this;\n\t\n\t      if (!newPassword) {\n\t        return callback.onFailure(new Error('New password is required.'));\n\t      }\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1]);\n\t      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t      var finalUserAttributes = {};\n\t      if (requiredAttributeData) {\n\t        Object.keys(requiredAttributeData).forEach(function (key) {\n\t          finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t        });\n\t      }\n\t\n\t      finalUserAttributes.NEW_PASSWORD = newPassword;\n\t      finalUserAttributes.USERNAME = this.username;\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: finalUserAttributes,\n\t        Session: this.Session\n\t      }, function (errAuthenticate, dataAuthenticate) {\n\t        if (errAuthenticate) {\n\t          return callback.onFailure(errAuthenticate);\n\t        }\n\t        return _this3.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session using device authentication. It is called at the end of user\n\t     * authentication\n\t     *\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this4 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey);\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this4.deviceKey, _this4.randomPassword, serverBValue, salt);\n\t\n\t        var dateNow = dateHelper.getNowString();\n\t\n\t        var signatureString = _global.util.crypto.hmac(hkdf, _global.util.buffer.concat([new _global.util.Buffer(_this4.deviceGroupKey, 'utf8'), new _global.util.Buffer(_this4.deviceKey, 'utf8'), new _global.util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'), new _global.util.Buffer(dateNow, 'utf8')]), 'base64', 'sha256');\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this4.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this4.deviceKey;\n\t\n\t        _this4.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this4.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this4.cacheTokens();\n\t\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has the responses to a custom challenge\n\t     * @param {string} answerChallenge The custom challange answer.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {customChallenge} callback.customChallenge\n\t     *    Custom challenge response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this5 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this5.Session = data.Session;\n\t          return callback.customChallenge(data.ChallengeParameters);\n\t        }\n\t\n\t        _this5.signInUserSession = _this5.getCognitoUserSession(data.AuthenticationResult);\n\t        _this5.cacheTokens();\n\t        return callback.onSuccess(_this5.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has an MFA code\n\t     * @param {string} confirmationCode The MFA code entered by the user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this6 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = dataAuthenticate.ChallengeName;\n\t\n\t        if (challengeName === 'DEVICE_SRP_AUTH') {\n\t          _this6.getDeviceResponse(callback);\n\t          return undefined;\n\t        }\n\t\n\t        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this6.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this6.pool.getUserPoolId().split('_')[1]);\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: new _global.util.Buffer(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t          PasswordVerifier: new _global.util.Buffer(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t        };\n\t\n\t        _this6.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t        _this6.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this6.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this6.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this6.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this6.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this6.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this6.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to change the current password\n\t     * @param {string} oldUserPassword The current password.\n\t     * @param {string} newUserPassword The requested new password.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to enable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to disable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n\t     */\n\t    /**\n\t     * This is used by an authenticated user to change a list of attributes\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get a list of attributes\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get the MFAOptions\n\t     * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getMFAOptions',\n\t    value: function getMFAOptions(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        return callback(null, userData.MFAOptions);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete a list of attributes\n\t     * @param {string[]} attributeList Names of the attributes to delete.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by a user to resend a confirmation code\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session, either from the session object\n\t     * or from  the local storage, or by using a refresh token\n\t     *\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      if (this.storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: this.storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: this.storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: this.storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      } else {\n\t        callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n\t      }\n\t\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This uses the refreshToken to retrieve a new session\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this8 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      if (this.storage.getItem(lastUserKey)) {\n\t        this.username = this.storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = this.storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          if (err.code === 'NotAuthorizedException') {\n\t            _this8.clearCachedTokens();\n\t          }\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this8.signInUserSession = _this8.getCognitoUserSession(authenticationResult);\n\t          _this8.cacheTokens();\n\t          return callback(null, _this8.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to save the session tokens to local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      this.storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\n\t     * This is used to cache the device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      this.storage.setItem(deviceKeyKey, this.deviceKey);\n\t      this.storage.setItem(randomPasswordKey, this.randomPassword);\n\t      this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to get current device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      if (this.storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = this.storage.getItem(deviceKeyKey);\n\t        this.randomPassword = this.storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the device key info from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      this.storage.removeItem(deviceKeyKey);\n\t      this.storage.removeItem(randomPasswordKey);\n\t      this.storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the session tokens from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      this.storage.removeItem(idTokenKey);\n\t      this.storage.removeItem(accessTokenKey);\n\t      this.storage.removeItem(refreshTokenKey);\n\t      this.storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to build a user session from tokens retrieved in the authentication result\n\t     * @param {object} authResult Successful auth response from server.\n\t     * @returns {CognitoUserSession} The new user session.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate a forgot password request\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\n\t     *    Optional callback raised instead of onSuccess with response data.\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm a new password using a confirmationCode\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {string} newPassword Confirm new password.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate an attribute confirmation request\n\t     * @param {string} attributeName User attribute that needs confirmation.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm an attribute using a confirmation code\n\t     * @param {string} attributeName Attribute being confirmed.\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get the device information using the current device key\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget a specific device\n\t     * @param {string} deviceKey Device key.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetSpecificDevice',\n\t    value: function forgetSpecificDevice(deviceKey, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget the current device\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this9 = this;\n\t\n\t      this.forgetSpecificDevice(this.deviceKey, {\n\t        onFailure: callback.onFailure,\n\t        onSuccess: function onSuccess(result) {\n\t          _this9.deviceKey = null;\n\t          _this9.deviceGroupKey = null;\n\t          _this9.randomPassword = null;\n\t          _this9.clearCachedDeviceKeyAndPassword();\n\t          return callback.onSuccess(result);\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as not remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to list all devices for a user\n\t     *\n\t     * @param {int} limit the number of devices returned in a call\n\t     * @param {string} paginationToken the pagination token in case any was returned before\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to globally revoke all tokens issued to a user\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this10 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this10.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\n\t   * Constructs a new CognitoUserAttribute object\n\t   * @param {string=} Name The record's name\n\t   * @param {string=} Value The record's value\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        Name = _ref.Name,\n\t        Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's value.\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's value.\n\t     * @param {string} value The new value.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's name.\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's name\n\t     * @param {string} name The new name.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} a string representation of the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\n\t     * @returns {object} a flat object representing the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {string} IdToken The session's Id token.\n\t   * @param {string=} RefreshToken The session's refresh token.\n\t   * @param {string} AccessToken The session's access token.\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoRefreshToken} the session's refresh token\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAccessToken} the session's access token\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\n\t     * Checks to see if the session is still valid based on session expiry information found\n\t     * in tokens and the current time\n\t     * @returns {boolean} if the session is still valid\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  _createClass(DateHelper, [{\n\t    key: 'getNowString',\n\t\n\t    /**\n\t     * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t     */\n\t    value: function getNowString() {\n\t      var now = new Date();\n\t\n\t      var weekDay = weekNames[now.getUTCDay()];\n\t      var month = monthNames[now.getUTCMonth()];\n\t      var day = now.getUTCDate();\n\t\n\t      var hours = now.getUTCHours();\n\t      if (hours < 10) {\n\t        hours = '0' + hours;\n\t      }\n\t\n\t      var minutes = now.getUTCMinutes();\n\t      if (minutes < 10) {\n\t        minutes = '0' + minutes;\n\t      }\n\t\n\t      var seconds = now.getUTCSeconds();\n\t      if (seconds < 10) {\n\t        seconds = '0' + seconds;\n\t      }\n\t\n\t      var year = now.getUTCFullYear();\n\t\n\t      // ddd MMM D HH:mm:ss UTC YYYY\n\t      var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t      return dateNow;\n\t    }\n\t  }]);\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar dataMemory = {};\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  _createClass(MemoryStorage, null, [{\n\t    key: 'setItem',\n\t\n\t\n\t    /**\n\t     * This is used to set a specific item in storage\n\t     * @param {string} key - the key for the item\n\t     * @param {object} value - the value\n\t     * @returns {string} value that was set\n\t     */\n\t    value: function setItem(key, value) {\n\t      dataMemory[key] = value;\n\t      return dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to get a specific key from storage\n\t     * @param {string} key - the key for the item\n\t     * This is used to clear the storage\n\t     * @returns {string} the data item\n\t     */\n\t\n\t  }, {\n\t    key: 'getItem',\n\t    value: function getItem(key) {\n\t      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to remove an item from storage\n\t     * @param {string} key - the key being set\n\t     * @returns {string} value - value that was deleted\n\t     */\n\t\n\t  }, {\n\t    key: 'removeItem',\n\t    value: function removeItem(key) {\n\t      return delete dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the storage\n\t     * @returns {string} nothing\n\t     */\n\t\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      dataMemory = {};\n\t      return dataMemory;\n\t    }\n\t  }]);\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t\n\t  /**\n\t   * This is used to get a storage object\n\t   * @returns {object} the storage\n\t   */\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      this.storageWindow = window.localStorage;\n\t      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n\t      this.storageWindow.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      this.storageWindow = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to return the storage\n\t   * @returns {object} the storage\n\t   */\n\t\n\t\n\t  _createClass(StorageHelper, [{\n\t    key: 'getStorage',\n\t    value: function getStorage() {\n\t      return this.storageWindow;\n\t    }\n\t  }]);\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\n\t   * Constructs a new AuthenticationDetails object\n\t   * @param {object=} data Creation options.\n\t   * @param {string} data.Username User being authenticated.\n\t   * @param {string} data.Password Plain-text password to authenticate with.\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {},\n\t        ValidationData = _ref.ValidationData,\n\t        Username = _ref.Username,\n\t        Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's username\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's password\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\n\t     * @returns {Array} the record's validationData\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\n\t   * Constructs a new CognitoUserPool object\n\t   * @param {object} data Creation options.\n\t   * @param {string} data.UserPoolId Cognito user pool id.\n\t   * @param {string} data.ClientId User pool application client id.\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {},\n\t        UserPoolId = _ref.UserPoolId,\n\t        ClientId = _ref.ClientId;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t\n\t    this.client = new _cognitoidentityserviceprovider2.default({ apiVersion: '2016-04-19', region: region });\n\t\n\t    this.storage = new _StorageHelper2.default().getStorage();\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the user pool id\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the client id\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\n\t     * @typedef {object} SignUpResult\n\t     * @property {CognitoUser} user New user.\n\t     * @property {bool} userConfirmed If the user is already confirmed.\n\t     */\n\t    /**\n\t     * method for signing up a user\n\t     * @param {string} username User's username.\n\t     * @param {string} password Plain-text initial password entered by user.\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * method for getting the current user of the application from the local storage\n\t     *\n\t     * @returns {CognitoUser} the user retrieved from storage\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t\n\t      var lastAuthUser = this.storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-identity.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 03508c239c5db8678652","import CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\nimport * as enhancements from './src';\n\nexport * from './src';\n\nObject.keys(enhancements).forEach(key => {\n  CognitoIdentityServiceProvider[key] = enhancements[key];\n});\n\n// The version of crypto-browserify included by aws-sdk only\n// checks for window.crypto, not window.msCrypto as used by\n// IE 11 – so we set it explicitly here\nif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n  window.crypto = window.msCrypto;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./enhance.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk/global\",\"commonjs\":\"aws-sdk/global\",\"amd\":\"aws-sdk/global\"}\n// module id = 1\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\nimport { BigInteger } from 'jsbn';\n\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\nconst newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nexport default class AuthenticationHelper {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  constructor(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2');\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\n\n    this.smallAValue = this.generateRandomSmallA();\n    this.largeAValue = this.calculateA(this.smallAValue);\n\n    this.infoBits = new util.Buffer('Caldera Derived Key', 'utf8');\n\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @returns {BigInteger} large A, a value generated from small A\n   */\n  getLargeAValue() {\n    return this.largeAValue;\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  generateRandomSmallA() {\n    const hexRandom = util.crypto.lib.randomBytes(128).toString('hex');\n\n    const randomBigInt = new BigInteger(hexRandom, 16);\n    const smallABigInt = randomBigInt.mod(this.N);\n\n    return smallABigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  generateRandomString() {\n    return util.crypto.lib.randomBytes(40).toString('base64');\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @returns {void}\n   */\n  generateHashDevice(deviceGroupKey, username) {\n    this.randomPassword = this.generateRandomString();\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n    const hashedString = this.hash(combinedString);\n\n    const hexRandom = util.crypto.lib.randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n\n    const verifierDevicesNotPadded = this.g.modPow(\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\n      this.N);\n\n    this.verifierDevices = this.padHex(verifierDevicesNotPadded);\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @returns {BigInteger} Computed large A.\n   * @private\n   */\n  calculateA(a) {\n    const A = this.g.modPow(a, this.N);\n\n    if (A.mod(this.N).toString() === '0') {\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\n    }\n    return A;\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    const finalU = new BigInteger(this.UHexHash, 16);\n\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hash(buf) {\n    const hashHex = util.crypto.sha256(buf, 'hex');\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hexHash(hexStr) {\n    return this.hash(new util.Buffer(hexStr, 'hex'));\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n  computehkdf(ikm, salt) {\n    const prk = util.crypto.hmac(salt, ikm, 'buffer', 'sha256');\n    const infoBitsUpdate = util.buffer.concat([\n      this.infoBits,\n      new util.Buffer(String.fromCharCode(1), 'utf8'),\n    ]);\n    const hmac = util.crypto.hmac(prk, infoBitsUpdate, 'buffer', 'sha256');\n    return hmac.slice(0, 16);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @returns {Buffer} Computed HKDF value.\n   */\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(new BigInteger('0', 16))) {\n      throw new Error('U cannot be zero.');\n    }\n\n    const usernamePassword = `${this.poolName}${username}:${password}`;\n    const usernamePasswordHash = this.hash(usernamePassword);\n\n    const xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n\n    const gModPowXN = this.g.modPow(xValue, this.N);\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n    const sValue = intValue2.modPow(\n      this.smallAValue.add(this.UValue.multiply(xValue)),\n      this.N\n    ).mod(this.N);\n\n    const hkdf = this.computehkdf(\n      new util.Buffer(this.padHex(sValue), 'hex'),\n      new util.Buffer(this.padHex(this.UValue.toString(16)), 'hex'));\n\n    return hkdf;\n  }\n\n  /**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n  getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n  padHex(bigInt) {\n    let hashStr = bigInt.toString(16);\n    if (hashStr.length % 2 === 1) {\n      hashStr = `0${hashStr}`;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = `00${hashStr}`;\n    }\n    return hashStr;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationHelper.js","/*\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor({ AccessToken } = {}) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAccessToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor({ IdToken } = {}) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoIdToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor({ RefreshToken } = {}) {\n    // Assign object\n    this.token = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.token;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoRefreshToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\nimport { BigInteger } from 'jsbn';\n\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n\n/** @class */\nexport default class CognitoUser {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   */\n  constructor(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n\n    this.client = data.Pool.client;\n\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n\n    this.storage = new StorageHelper().getStorage();\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n  getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  authenticateUser(authDetails, callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1]);\n    const dateHelper = new DateHelper();\n\n    let serverBValue;\n    let salt;\n    const authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n      authParameters.CHALLENGE_NAME = 'SRP_A';\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      AuthFlow: this.authenticationFlowType,\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      this.username = challengeParameters.USER_ID_FOR_SRP;\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      salt = new BigInteger(challengeParameters.SALT, 16);\n      this.getCachedDeviceKeyAndPassword();\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.username,\n        authDetails.getPassword(),\n        serverBValue,\n        salt);\n\n      const dateNow = dateHelper.getNowString();\n\n      const signatureString = util.crypto.hmac(hkdf, util.buffer.concat([\n        new util.Buffer(this.pool.getUserPoolId().split('_')[1], 'utf8'),\n        new util.Buffer(this.username, 'utf8'),\n        new util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'),\n        new util.Buffer(dateNow, 'utf8'),\n      ]), 'base64', 'sha256');\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n      if (this.deviceKey != null) {\n        challengeResponses.DEVICE_KEY = this.deviceKey;\n      }\n\n      const respondToAuthChallenge = (challenge, challengeCallback) =>\n        this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge,\n          (errChallenge, dataChallenge) => {\n            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' &&\n                errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n              challengeResponses.DEVICE_KEY = null;\n              this.deviceKey = null;\n              this.randomPassword = null;\n              this.deviceGroupKey = null;\n              this.clearCachedDeviceKeyAndPassword();\n              return respondToAuthChallenge(challenge, challengeCallback);\n            }\n            return challengeCallback(errChallenge, dataChallenge);\n          });\n\n      respondToAuthChallenge({\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        const challengeName = dataAuthenticate.ChallengeName;\n        if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n          this.Session = dataAuthenticate.Session;\n          let userAttributes = null;\n          let rawRequiredAttributes = null;\n          const requiredAttributes = [];\n          const userAttributesPrefix = authenticationHelper\n            .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n          if (dataAuthenticate.ChallengeParameters) {\n            userAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.userAttributes);\n            rawRequiredAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.requiredAttributes);\n          }\n\n          if (rawRequiredAttributes) {\n            for (let i = 0; i < rawRequiredAttributes.length; i++) {\n              requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n            }\n          }\n          return callback.newPasswordRequired(userAttributes, requiredAttributes);\n        }\n        return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n  authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    const challengeName = dataAuthenticate.ChallengeName;\n    const challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.cacheTokens();\n\n    const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n    const deviceSecretVerifierConfig = {\n      Salt: new util.Buffer(\n          authenticationHelper.getSaltDevices(), 'hex'\n        ).toString('base64'),\n      PasswordVerifier: new util.Buffer(\n          authenticationHelper.getVerifierDevices(), 'hex'\n        ).toString('base64'),\n    };\n\n    this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n    this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n    this.randomPassword = authenticationHelper.getRandomPassword();\n\n    this.client.makeUnauthenticatedRequest('confirmDevice', {\n      DeviceKey: newDeviceMetadata.DeviceKey,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n      DeviceName: navigator.userAgent,\n    }, (errConfirm, dataConfirm) => {\n      if (errConfirm) {\n        return callback.onFailure(errConfirm);\n      }\n\n      this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n      this.cacheDeviceKeyAndPassword();\n      if (dataConfirm.UserConfirmationNecessary === true) {\n        return callback.onSuccess(\n          this.signInUserSession, dataConfirm.UserConfirmationNecessary);\n      }\n      return callback.onSuccess(this.signInUserSession);\n    });\n    return undefined;\n  }\n\n  /**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n  completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1]);\n    const userAttributesPrefix = authenticationHelper\n      .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n    const finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach((key) => {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n    }, (errAuthenticate, dataAuthenticate) => {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n  getDeviceResponse(callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.deviceGroupKey);\n    const dateHelper = new DateHelper();\n\n    const authParameters = {};\n\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'DEVICE_SRP_AUTH',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: authParameters,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      const salt = new BigInteger(challengeParameters.SALT, 16);\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.deviceKey,\n        this.randomPassword,\n        serverBValue,\n        salt);\n\n      const dateNow = dateHelper.getNowString();\n\n      const signatureString = util.crypto.hmac(hkdf, util.buffer.concat([\n        new util.Buffer(this.deviceGroupKey, 'utf8'),\n        new util.Buffer(this.deviceKey, 'utf8'),\n        new util.Buffer(challengeParameters.SECRET_BLOCK, 'base64'),\n        new util.Buffer(dateNow, 'utf8'),\n      ]), 'base64', 'sha256');\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n        this.cacheTokens();\n\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challange answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendCustomChallengeAnswer(answerChallenge, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = data.ChallengeName;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        this.Session = data.Session;\n        return callback.customChallenge(data.ChallengeParameters);\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\n      this.cacheTokens();\n      return callback.onSuccess(this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendMFACode(confirmationCode, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'SMS_MFA',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, dataAuthenticate) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        this.getDeviceResponse(callback);\n        return undefined;\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      this.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(this.signInUserSession);\n      }\n\n      const authenticationHelper = new AuthenticationHelper(\n        this.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n      const deviceSecretVerifierConfig = {\n        Salt: new util.Buffer(\n            authenticationHelper.getSaltDevices(), 'hex'\n          ).toString('base64'),\n        PasswordVerifier: new util.Buffer(\n            authenticationHelper.getVerifierDevices(), 'hex'\n          ).toString('base64'),\n      };\n\n      this.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\n        .NewDeviceMetadata.DeviceGroupKey;\n      this.randomPassword = authenticationHelper.getRandomPassword();\n\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent,\n      }, (errConfirm, dataConfirm) => {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        this.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(\n            this.signInUserSession,\n            dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('changePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n    const mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number',\n    };\n    mfaOptions.push(mfaEnabled);\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n\n  /**\n   * This is used by an authenticated user to delete himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteUser(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      this.clearCachedTokens();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const attributeList = [];\n\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\n        const attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value,\n        };\n        const userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  resendConfirmationCode(callback) {\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const idTokenKey = `${keyPrefix}.idToken`;\n    const accessTokenKey = `${keyPrefix}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\n\n    if (this.storage.getItem(idTokenKey)) {\n      const idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey),\n      });\n      const accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey),\n      });\n      const refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey),\n      });\n\n      const sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n      };\n      const cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (refreshToken.getToken() == null) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  refreshSession(refreshToken, callback) {\n    const authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n    }, (err, authResult) => {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          this.clearCachedTokens();\n        }\n        return callback(err, null);\n      }\n      if (authResult) {\n        const authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\n        this.cacheTokens();\n        return callback(null, this.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  cacheTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  cacheDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  getCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  clearCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  clearCachedTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  getCognitoUserSession(authResult) {\n    const idToken = new CognitoIdToken(authResult);\n    const accessToken = new CognitoAccessToken(authResult);\n    const refreshToken = new CognitoRefreshToken(authResult);\n\n    const sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n    };\n\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgotPassword(callback) {\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  confirmPassword(confirmationCode, newPassword, callback) {\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n  getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.inputVerificationCode(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetDevice(callback) {\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: result => {\n        this.deviceKey = null;\n        this.deviceGroupKey = null;\n        this.randomPassword = null;\n        this.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      },\n    });\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('listDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  globalSignOut(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      this.clearCachedTokens();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  signOut() {\n    this.signInUserSession = null;\n    this.clearCachedTokens();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUser.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserAttribute {\n  /**\n   * Constructs a new CognitoUserAttribute object\n   * @param {string=} Name The record's name\n   * @param {string=} Value The record's value\n   */\n  constructor({ Name, Value } = {}) {\n    this.Name = Name || '';\n    this.Value = Value || '';\n  }\n\n  /**\n   * @returns {string} the record's value.\n   */\n  getValue() {\n    return this.Value;\n  }\n\n  /**\n   * Sets the record's value.\n   * @param {string} value The new value.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setValue(value) {\n    this.Value = value;\n    return this;\n  }\n\n  /**\n   * @returns {string} the record's name.\n   */\n  getName() {\n    return this.Name;\n  }\n\n  /**\n   * Sets the record's name\n   * @param {string} name The new name.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setName(name) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * @returns {string} a string representation of the record.\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * @returns {object} a flat object representing the record.\n   */\n  toJSON() {\n    return {\n      Name: this.Name,\n      Value: this.Value,\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserAttribute.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserSession {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {string} IdToken The session's Id token.\n   * @param {string=} RefreshToken The session's refresh token.\n   * @param {string} AccessToken The session's access token.\n   */\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserSession.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DateHelper.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet dataMemory = {};\n\n/** @class */\nclass MemoryStorage {\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n  static setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  }\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n  static getItem(key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  }\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n  static removeItem(key) {\n    return delete dataMemory[key];\n  }\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n  static clear() {\n    dataMemory = {};\n    return dataMemory;\n  }\n}\n\n/** @class */\nexport default class StorageHelper {\n\n  /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */\n  constructor() {\n    try {\n      this.storageWindow = window.localStorage;\n      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n      this.storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n\n  /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */\n  getStorage() {\n    return this.storageWindow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StorageHelper.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n// module id = 12\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class AuthenticationDetails {\n  /**\n   * Constructs a new AuthenticationDetails object\n   * @param {object=} data Creation options.\n   * @param {string} data.Username User being authenticated.\n   * @param {string} data.Password Plain-text password to authenticate with.\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n   */\n  constructor(data) {\n    const { ValidationData, Username, Password } = data || {};\n    this.validationData = ValidationData || [];\n    this.username = Username;\n    this.password = Password;\n  }\n\n  /**\n   * @returns {string} the record's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {string} the record's password\n   */\n  getPassword() {\n    return this.password;\n  }\n\n  /**\n   * @returns {Array} the record's validationData\n   */\n  getValidationData() {\n    return this.validationData;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationDetails.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\n\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n\n/** @class */\nexport default class CognitoUserPool {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   */\n  constructor(data) {\n    const { UserPoolId, ClientId } = data || {};\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    const region = UserPoolId.split('_')[0];\n\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\n\n    this.storage = new StorageHelper().getStorage();\n  }\n\n  /**\n   * @returns {string} the user pool id\n   */\n  getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\n   * @returns {string} the client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  signUp(username, password, userAttributes, validationData, callback) {\n    this.client.makeUnauthenticatedRequest('signUp', {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n    }, (err, data) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const cognitoUser = {\n        Username: username,\n        Pool: this,\n      };\n\n      const returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n      };\n\n      return callback(null, returnData);\n    });\n  }\n\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  getCurrentUser() {\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n\n    const lastAuthUser = this.storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      const cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n      };\n\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserPool.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default as AuthenticationDetails } from './AuthenticationDetails';\nexport { default as AuthenticationHelper } from './AuthenticationHelper';\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\nexport { default as CognitoIdToken } from './CognitoIdToken';\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\nexport { default as CognitoUser } from './CognitoUser';\nexport { default as CognitoUserAttribute } from './CognitoUserAttribute';\nexport { default as CognitoUserPool } from './CognitoUserPool';\nexport { default as CognitoUserSession } from './CognitoUserSession';\nexport { default as DateHelper } from './DateHelper';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}
>>>>>>> aws-master
